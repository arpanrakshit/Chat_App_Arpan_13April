plugins {

   id "java"

   id "eclipse"

      id "eclipse-wtp"

      id "maven-publish"

      id "org.springframework.boot" version "2.3.3.RELEASE" apply false

   id "com.github.onslip.gradle-one-jar" version "1.0.5"

   id "com.apollographql.apollo3" version "3.8.2" apply false

  }

 

allprojects {

  apply plugin: 'eclipse'

  apply plugin: 'eclipse-wtp'

  apply plugin: 'java'

  apply plugin: 'java-library'

  apply plugin: 'gradle-one-jar'

  apply plugin: 'maven-publish'

 

  sourceCompatibility = 11

  targetCompatibility = 11

 

  version = '0.0.1'

  group = 'com.pzone.insight'

 

  repositories {

    mavenCentral()

    jcenter()

  }

 

  ext {

    createdBy = 'ProtocolZone private limited'

    log4j2 = '2.11.2'

    spring = '2.6.7'

    gcp = '3.2.1'

  }

 

  configurations.all {

      all*.exclude module: 'google-cloud-storage'

  }

  

  dependencies {


	implementation 'org.springframework.boot:spring-boot-starter-websocket'


	implementation 'javax.websocket:javax.websocket-api:1.1'

    implementation ("joda-time:joda-time:2.10.6")

   

    implementation ("com.google.code.gson:gson:2.8.6")

    implementation ("com.google.guava:guava:32.0.1-jre")

   

    implementation ("org.projectlombok:lombok:1.18.30")

    annotationProcessor ("org.projectlombok:lombok:1.18.30")

   

    implementation ("org.apache.commons:commons-lang3:3.12.0")

    implementation ("org.apache.commons:commons-math3:3.6.1")

   

    implementation ("commons-io:commons-io:2.13.0")

   

    implementation ("io.springfox:springfox-swagger2:2.9.2")

   implementation ("io.springfox:springfox-swagger-ui:2.9.2")

   

    implementation ("org.springframework.boot:spring-boot-starter-web:${spring}")

      implementation ("org.springframework.boot:spring-boot-starter-actuator:${spring}")

      implementation ("org.springframework.boot:spring-boot-starter-data-jpa:${spring}")

      

      implementation ("mysql:mysql-connector-java:8.0.33")

      implementation ("javax.xml.bind:jaxb-api:2.3.1")

      

  }

 

  jar {

    doFirst {

      compileJava.destinationDir.mkdirs()

      File buildstamp = new File(compileJava.destinationDir, "buildstamp").write(version)

    }

   

    manifest.attributes 'Created-By': createdBy, 'Application-Name': project.name, 'Implementation-Version': project.version

  }

 

  task cleanLib(type: Delete, dependsOn: clean) {

    delete fileTree(dir: '../lib/')

  }

 

  task insightJars(dependsOn: ['clean', 'build']) {

  }

 

  publishing {

    publications {

        mavenJava(MavenPublication) {

        from components.java

      }

    }

  }

 

  compileJava.mustRunAfter cleanLib

  compileJava.mustRunAfter clean

  cleanLib.mustRunAfter clean

 

  tasks.publishToMavenLocal.dependsOn(insightJars)

  publishToMavenLocal.mustRunAfter insightJars

  

  defaultTasks 'cleanLib', 'build', 'insightJars'

 

  test {

    testLogging {

        events = ['started', 'passed', 'failed']

        showCauses = true

    }

  }

 

  configurations {

    jpamodelgen

  }

 

  eclipse {

    classpath {

      downloadSources = true

      downloadJavadoc = true

      defaultOutputDir = file('eclipse/build')

    }

  }

}